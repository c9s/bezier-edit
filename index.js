// Generated by LiveScript 1.3.1
var x$;
x$ = angular.module('main', ['firebase', 'ngDraggable']);
x$.controller('main', ['$scope', '$firebaseArray'].concat(function($scope, $firebaseArray){
  var ref, layers, ref$, w, h, padding, bcr, random, build, getpath;
  ref = new Firebase('https://aidraw.firebaseio.com/layers');
  layers = $firebaseArray(ref);
  layers.$watch(function(){
    if (!$scope.nodes) {
      $scope.nodes = $scope.layers[0];
    }
    return build();
  });
  ref$ = [1024, 600, 60], w = ref$[0], h = ref$[1], padding = ref$[2];
  $scope.chosen = null;
  $scope.layers = layers != null
    ? layers
    : [];
  $scope.setClose = function(){
    $scope.nodes.isClosed = !$scope.nodes.isClosed;
    return build();
  };
  bcr = 4 * (Math.sqrt(2) - 1) / 3;
  $scope.addcircle = function(){
    var ref$, mx, my, r, ret, i$, step$, a, layer;
    ref$ = [1024 / 2, 600 / 2, 50], mx = ref$[0], my = ref$[1], r = ref$[2];
    ret = [];
    for (i$ = 0, step$ = 6.28 / 4; step$ < 0 ? i$ > 6.28 : i$ < 6.28; i$ += step$) {
      a = i$;
      ret.push({
        anchor: [mx + r * Math.cos(a), my + r * Math.sin(a)],
        ctrl1: [Math.cos(a - 6.28 / 4) * r * bcr, Math.sin(a - 6.28 / 4) * r * bcr],
        ctrl2: [-Math.cos(a - 6.28 / 4) * r * bcr, -Math.sin(a - 6.28 / 4) * r * bcr]
      });
    }
    layer = $scope.layer.add();
    layer.isClosed = true;
    return layer.points = ret;
  };
  $scope.addsquare = function(){
    var ref$, mx, my, r, ret, layer;
    ref$ = [1024 / 2, 600 / 2, 50], mx = ref$[0], my = ref$[1], r = ref$[2];
    ret = [
      {
        anchor: [mx - r, my - r],
        ctrl1: [0, 0],
        ctrl2: [0, 0]
      }, {
        anchor: [mx + r, my - r],
        ctrl1: [0, 0],
        ctrl2: [0, 0]
      }, {
        anchor: [mx + r, my + r],
        ctrl1: [0, 0],
        ctrl2: [0, 0]
      }, {
        anchor: [mx - r, my + r],
        ctrl1: [0, 0],
        ctrl2: [0, 0]
      }
    ];
    layer = $scope.layer.add();
    layer.isClosed = true;
    return layer.points = ret;
  };
  $scope.reorder = function(s, d, e){
    var layer;
    layer = $scope.layers.splice(s, 1)[0];
    if (d <= $scope.layers.length) {
      return $scope.layers.splice(d, 0, layer);
    } else {
      return $scope.layers.push(layer);
    }
  };
  $scope.layer = {
    add: function(){
      var ret;
      ret = {
        points: [],
        stroke: '#000000',
        fill: 'none'
      };
      $scope.layers.$add(ret);
      $scope.layers.$save();
      return ret;
    },
    remove: function(){
      var idx, ref$;
      if ($scope.layers.length <= 1) {
        return;
      }
      idx = $scope.layers.indexOf(this.target);
      $scope.layers.$remove(idx);
      this.target = $scope.layers[(ref$ = idx - 1) > 0 ? ref$ : 0];
      this.set((ref$ = idx - 1) > 0 ? ref$ : 0);
      return $scope.layers.$save();
    },
    set: function(it){
      if (typeof it === typeof 0) {
        this.target = $scope.layers[it];
      } else {
        this.target = it;
      }
      $scope.nodes = this.target;
      build();
      return $scope.path = "";
    },
    target: $scope.layers[0],
    buildall: function(){
      var i$, ref$, len$, layer, points, ret, results$ = [];
      for (i$ = 0, len$ = (ref$ = $scope.layers).length; i$ < len$; ++i$) {
        layer = ref$[i$];
        points = layer.points || [];
        if (points.length === 0) {
          continue;
        }
        ret = getpath(points, layer.isClosed);
        results$.push(layer.path = ret);
      }
      return results$;
    }
  };
  $scope.remove = function(){
    if (typeof $scope.chosen === typeof 1 && $scope.chosen < $scope.nodes.points.length) {
      $scope.nodes.points.splice($scope.chosen, 1);
      $scope.chosen = undefined;
    } else {
      $scope.nodes.points.splice(0, 1);
    }
    return build();
  };
  $scope.random = function(){
    random();
    return build();
  };
  random = function(key){
    var ret, ref$;
    ret = {};
    if (typeof key !== "undefined") {
      ret.anchor = [padding + (w - padding * 2) * (key % 2), padding + key * 50];
    } else {
      ret.anchor = [Math.random() * (w - padding * 2) + padding, Math.random() * (h - padding * 2) + padding];
    }
    ret.ctrl1 = [Math.random() * 100 - 50, Math.random() * 100 - 50];
    ret.ctrl2 = [Math.random() * 100 - 50, Math.random() * 100 - 50];
    ((ref$ = $scope.nodes).points || (ref$.points = [])).push(ret);
    return $scope.layers.$save($scope.layers.indexOf($scope.nodes));
  };
  build = function(){
    var ret;
    if (!$scope.nodes || !$scope.nodes.points || $scope.nodes.points.length === 0) {
      return;
    }
    ret = getpath($scope.nodes.points, $scope.nodes.isClosed);
    $scope.path = ret;
    return $scope.layer.buildall();
  };
  getpath = function(points, isClosed){
    var ret, last, i$, to$, i, item, c1x, c1y, c2x, c2y;
    isClosed == null && (isClosed = false);
    ret = "M" + points[0].anchor[0] + " " + points[0].anchor[1];
    last = points[0];
    if (isClosed) {
      points = points.concat([points[0]]);
    }
    for (i$ = 1, to$ = points.length; i$ < to$; ++i$) {
      i = i$;
      item = points[i];
      c1x = last.anchor[0] + last.ctrl2[0];
      c1y = last.anchor[1] + last.ctrl2[1];
      c2x = item.anchor[0] + item.ctrl1[0];
      c2y = item.anchor[1] + item.ctrl1[1];
      ret += "C" + c1x + " " + c1y + " " + c2x + " " + c2y + " " + item.anchor[0] + " " + item.anchor[1];
      last = item;
    }
    return ret;
  };
  $scope.$watch('nodes', function(){
    return build();
  });
  $scope.dragpath = {};
  $scope.ptrctrl = {
    down: function(e){
      var node, ref$, that;
      node = $(e.target);
      if ((node.attr('class') || "").split(' ').indexOf('ctrl') >= 0) {
        $scope.ctrl = node.attr('ctrl');
      }
      while (node) {
        if (node.attr('idx')) {
          break;
        }
        if ((node.attr('class') || "").split(' ').indexOf('activepath') >= 0) {
          break;
        }
        node = $(node.parent());
        if ((ref$ = node[0].nodeName) === 'BODY' || ref$ === 'SVG') {
          break;
        }
      }
      if ((node.attr('class') || "").split(' ').indexOf('activepath') >= 0) {
        $scope.dragpath.active = true;
        $scope.dragpath.ptr = this.map([e.offsetX, e.offsetY]);
        $scope.dragpath.ptr[0] -= ((ref$ = $scope.nodes).offset || (ref$.offset = {})).x || 0;
        return $scope.dragpath.ptr[1] -= ((ref$ = $scope.nodes).offset || (ref$.offset = {})).y || 0;
      } else if (that = node.attr('idx')) {
        return $scope.idx = $scope.chosen = parseInt(that);
      }
    },
    map: function(arg$){
      var x, y, ref$, w, h, aw, ah, dx, dy;
      x = arg$[0], y = arg$[1];
      ref$ = [$('svg').width(), $('svg').height()], w = ref$[0], h = ref$[1];
      ref$ = [w, h], aw = ref$[0], ah = ref$[1];
      if (w / h > 1024 / 600) {
        w = h * 1024 / 600;
      } else if (w / h < 1024 / 600) {
        h = w * 600 / 1024;
      }
      ref$ = [(aw - w) / 2, (ah - h) / 2], dx = ref$[0], dy = ref$[1];
      x = ((x - dx) / w) * 1024;
      y = ((y - dy) / h) * 600;
      return [x, y];
    },
    move: function(e){
      var ref$, x, y, item;
      if (!$scope.nodes) {
        return;
      }
      ref$ = [e.offsetX, e.offsetY], x = ref$[0], y = ref$[1];
      ref$ = this.map([x, y]), x = ref$[0], y = ref$[1];
      if ($scope.dragpath.active) {
        $scope.nodes.offset = {
          x: x - $scope.dragpath.ptr[0],
          y: y - $scope.dragpath.ptr[1]
        };
        return;
      }
      if ($scope.nodes.offset) {
        ref$ = [x - ($scope.nodes.offset.x || 0), y - ($scope.nodes.offset.y || 0)], x = ref$[0], y = ref$[1];
      }
      item = ((ref$ = $scope.nodes).points || (ref$.points = []))[$scope.idx];
      if (item && !$scope.ctrl) {
        item.anchor[0] = x;
        item.anchor[1] = y;
        build();
      }
      if (item && $scope.ctrl) {
        item["ctrl" + $scope.ctrl][0] = x - item.anchor[0];
        item["ctrl" + $scope.ctrl][1] = y - item.anchor[1];
        return build();
      }
    },
    mup: function(e){
      $scope.dragpath.active = false;
      $scope.idx = null;
      return $scope.ctrl = null;
    },
    keydown: function(e){
      var keycode;
      keycode = e.keyCode || e.which;
      if (keycode === 8) {
        e.preventDefault();
        return $scope.remove();
      }
    },
    keypress: function(e){}
  };
  ldColorPicker.init();
  $scope.color = {
    setTarget: function(it){
      return this.target = it;
    },
    fill: 'none',
    stroke: 'black'
  };
  return $('#fillbtn')[0]._ldcpnode._ldcp.on('change', function(color){
    return $scope.$apply(function(){
      if ($scope.nodes && $scope.nodes[$scope.color.target]) {
        return $scope.nodes[$scope.color.target] = color;
      }
    });
  });
}));