// Generated by LiveScript 1.3.1
var x$;
x$ = angular.module('main', []);
x$.controller('main', ['$scope'].concat(function($scope){
  var ref$, w, h, padding, random, i$, i, build;
  ref$ = [1024, 600, 60], w = ref$[0], h = ref$[1], padding = ref$[2];
  $scope.chosen = null;
  $scope.nodes = [];
  $scope.remove = function(){
    if (typeof $scope.chosen === typeof 1 && $scope.chosen < $scope.nodes.length) {
      $scope.nodes.splice($scope.chosen, 1);
      $scope.chosen = undefined;
    } else {
      $scope.nodes.splice(0, 1);
    }
    return build();
  };
  $scope.random = function(){
    random();
    return build();
  };
  random = function(key){
    var ret;
    ret = {};
    if (typeof key !== "undefined") {
      ret.anchor = [padding + (w - padding * 2) * (key % 2), padding + key * 50];
    } else {
      ret.anchor = [Math.random() * (w - padding * 2) + padding, Math.random() * (h - padding * 2) + padding];
    }
    ret.ctrl1 = [Math.random() * 100 - 50, Math.random() * 100 - 50];
    ret.ctrl2 = [Math.random() * 100 - 50, Math.random() * 100 - 50];
    return $scope.nodes.push(ret);
  };
  for (i$ = 0; i$ < 6; ++i$) {
    i = i$;
    random(i);
  }
  build = function(){
    var ret, last, i$, to$, i, item, c1x, c1y, c2x, c2y;
    ret = "M" + $scope.nodes[0].anchor[0] + " " + $scope.nodes[0].anchor[1];
    last = $scope.nodes[0];
    for (i$ = 1, to$ = $scope.nodes.length; i$ < to$; ++i$) {
      i = i$;
      item = $scope.nodes[i];
      c1x = last.anchor[0] + last.ctrl2[0];
      c1y = last.anchor[1] + last.ctrl2[1];
      c2x = item.anchor[0] + item.ctrl1[0];
      c2y = item.anchor[1] + item.ctrl1[1];
      ret += "C" + c1x + " " + c1y + " " + c2x + " " + c2y + " " + item.anchor[0] + " " + item.anchor[1];
      last = item;
    }
    return $scope.path = ret;
  };
  $scope.$watch('nodes', function(){
    return build();
  });
  return $scope.ptrctrl = {
    down: function(e){
      var node, ref$, that;
      node = $(e.target);
      if ((node.attr('class') || "").split(' ').indexOf('ctrl') >= 0) {
        $scope.ctrl = node.attr('ctrl');
      }
      while (node) {
        if (node.attr('idx')) {
          break;
        }
        node = $(node.parent());
        if ((ref$ = node[0].nodeName) === 'BODY' || ref$ === 'SVG') {
          break;
        }
      }
      if (that = node.attr('idx')) {
        return $scope.idx = $scope.chosen = parseInt(that);
      }
    },
    move: function(e){
      var item;
      item = $scope.nodes[$scope.idx];
      if (item && !$scope.ctrl) {
        item.anchor[0] = e.offsetX;
        item.anchor[1] = e.offsetY;
        build();
      }
      if (item && $scope.ctrl) {
        item["ctrl" + $scope.ctrl][0] = e.offsetX - item.anchor[0];
        item["ctrl" + $scope.ctrl][1] = e.offsetY - item.anchor[1];
        return build();
      }
    },
    mup: function(e){
      $scope.idx = null;
      return $scope.ctrl = null;
    },
    keydown: function(e){
      var keycode;
      keycode = e.keyCode || e.which;
      if (keycode === 8) {
        e.preventDefault();
        return $scope.remove();
      }
    },
    keypress: function(e){}
  };
}));